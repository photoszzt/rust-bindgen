/* automatically generated by rust-bindgen */

#![allow(
    dead_code,
    non_snake_case,
    non_camel_case_types,
    non_upper_case_globals
)]

#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T> {
    _alignment: [T; 0],
    _marker: ::std::marker::PhantomData<T>,
}
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub fn new() -> Self {
        __IncompleteArrayField {
            _marker: ::std::marker::PhantomData,
            _alignment: Default::default(),
        }
    }
    #[inline]
    pub unsafe fn as_ptr(&self) -> *const T {
        ::std::mem::transmute(self)
    }
    #[inline]
    pub unsafe fn as_mut_ptr(&mut self) -> *mut T {
        ::std::mem::transmute(self)
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::std::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::std::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl<T> ::std::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
impl<T> ::std::clone::Clone for __IncompleteArrayField<T> {
    #[inline]
    fn clone(&self) -> Self {
        Self::new()
    }
}
#[repr(C)]
#[derive(Debug, Default)]
pub struct bpf_raw_tracepoint_args {
    pub args: __IncompleteArrayField<::std::os::raw::c_ulonglong>,
}
#[test]
fn bindgen_test_layout_bpf_raw_tracepoint_args() {
    assert_eq!(
        ::std::mem::size_of::<bpf_raw_tracepoint_args>(),
        0usize,
        concat!("Size of: ", stringify!(bpf_raw_tracepoint_args))
    );
    assert_eq!(
        ::std::mem::align_of::<bpf_raw_tracepoint_args>(),
        8usize,
        concat!("Alignment of ", stringify!(bpf_raw_tracepoint_args))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bpf_raw_tracepoint_args>())).args as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(bpf_raw_tracepoint_args),
            "::",
            stringify!(args)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default)]
pub struct test_short {
    pub args: __IncompleteArrayField<::std::os::raw::c_short>,
}
#[test]
fn bindgen_test_layout_test_short() {
    assert_eq!(
        ::std::mem::size_of::<test_short>(),
        0usize,
        concat!("Size of: ", stringify!(test_short))
    );
    assert_eq!(
        ::std::mem::align_of::<test_short>(),
        2usize,
        concat!("Alignment of ", stringify!(test_short))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<test_short>())).args as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(test_short),
            "::",
            stringify!(args)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default)]
pub struct test_int {
    pub args: __IncompleteArrayField<::std::os::raw::c_int>,
}
#[test]
fn bindgen_test_layout_test_int() {
    assert_eq!(
        ::std::mem::size_of::<test_int>(),
        0usize,
        concat!("Size of: ", stringify!(test_int))
    );
    assert_eq!(
        ::std::mem::align_of::<test_int>(),
        4usize,
        concat!("Alignment of ", stringify!(test_int))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<test_int>())).args as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(test_int),
            "::",
            stringify!(args)
        )
    );
}
